%token DECLARE BOOLEAN CHAR VARCHAR2 NUMBER POSITIVE BEGIN END NULL DBMS_OUTPUT.PUT_LINE DBMS_OUTPUT.PUT DBMS_OUTPUT.NEW_LINE IF THEN WHILE LOOP identifier num TRUE FALSE NOT
%%
block:	declarations	compound_statement	'!'
;
declarations:	DECLARE declare_rest
|
;
declare_rest:	identifier	type	';'	declare_rest
|
;
type:	data_type	default
;
default: ':='	righthandside
|
;
data_type:	characters
|	numbers
|	BOOLEAN
;
characters:	CHAR
|	VARCHAR2	size
;
size:	'('	num	')'
;
numbers:	NUMBER	size
|	POSITIVE	size
;
compound_statement:	BEGIN	optional_statements	END	';'
;
optional_statements:	NULL	';'
|	statement_list
;
statement_list:	statement
|	statement_list	statement
;
statement:	lefthandside	';'
|	compound_statement
|	DBMS_OUTPUT.PUT_LINE	'('	identifier	')'	';'
|	DBMS_OUTPUT.PUT	'('	identifier	')'	';'
|	DBMS_OUTPUT.NEW_LINE	';'
|	'&'	identifier	';'
|	IF	BEGIN	expression	THEN	statement	END	IF	';'
|	WHILE	expression	LOOP	statement	END	LOOP	';'
;
lefthandside:	identifier	':='	righthandside
;
righthandside:	expression
|	't'	'stringliteral'	't'
|	't'	'c'	't'
|	casting	'('	expression	')'
;
casting:	data_type
;
expression:	simple_expression
|	simple_expression	relop	simple_expression
;
simple_expression:	term
|	simple_expression	addop	term
;
term:	factor
|	term	mulop	factor
;
factor:	'identifier'
|	'num'
|	TRUE
|	FALSE
|	NULL
|	NOT	factor
;
relop:	'g'
|	'eg'
|	'qe'
|	'xl'
|	'l'
|	'ne'
;
addop:	'+'
|	'-'
;
mulop:	'*'
|	'/'
|	'%'
;
%%
